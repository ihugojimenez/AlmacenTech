<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAUExMAFB2VwB3eXsAe3x8AJoTCwCeGA8AnxsSAKQaDwCjHhQAqB4SAKYhFwCsIhUAqyQZALAk
        FwCyJhgAtCkaALktHQC8MB8AmicgAKYqIQCqLiUAui8gAK0xJwCtNCsAvTEgALI2KwCnOjAArTgwALA+
        NgDBNSMAxTgmAMI7KgDJPCkAm0E8AK5DOwC/QjIAtEQ7AMtALADRRC8Aw0M0AM1EMQDPSTYAx0w9AMpK
        OQDTSjUA0lE+AJ5GQgCdX1wAsk5CALxPRgCkUUoAu1RMAKNaVwCzWFAAvVlRAK5hWACnbmsAt2xmALVw
        ZgCvf3sAzFRFAM9eTwDWVUEA2llFANJaSgDHXVAA2GBOAM9hUwDXZFMA22RSANNmWADWalsA2m1eAONl
        TwDhaVUA529bAMRtZgDNdmoA3nJhANZ1aQDYdmkA3HtsAMx8dQDgdGMA43hmAOt/bACFgX8AvIB7AM6C
        fADdiX4A4oNzAOaNfgDoiXkA8YZxAPGOewB8foAAfoCBAIaGhgCHiIcAhoiJAImJiQCJi40Aio2PAIyM
        jACRkZEAlpWWAJmWlgCampsAo4eHAKyCgQCpi4oAt4yGAKGcnQCwlpYAspuaAIGliwCdn6EAoJ+gAJ2g
        ogCfqKEAoaGhAKahogChpaEApqSjAKCipACjpacApqalAKmkpACpqKcApKeqAKWoqwCmqq0AqqurALio
        pwC1qqwAqq2wAKyvsQCrsLIArbCxAK2xtACvtLUAsbKzAL61tgCzuLcAuLi3ALG1uAC3t7gAtbm6ALe6
        vAC6u7sA046FANyNgADbl40AwJSRAOONgQDlkoYA65ODAOGTiADolYgA65mLAPCdjQDknZQA6Z+UAOag
        lgDqpJoA7qqeAPWjkwDyppgA8KueANmmoADRsKwAyre3AMC1uADDu7wA3r66AOysoQDwrKAA7LOrAPa3
        qwDwuK8A87uxAO/DvQDww7wAvL7AAL3AwgC+wcQAwsPEAMvDwwDDxskAxMfJAMbIygDHyswAycnKAM/I
        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
        Af////n/////////////////
</value>
  </data>
</root>